"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ú–µ–¥–∏–∞—Å–∫–∞—É—Ç
"""
import base64
from typing import Optional, Dict, Any, List
import aiohttp
from loguru import logger

from app.config import settings


class MediascoutAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ú–µ–¥–∏–∞—Å–∫–∞—É—Ç"""
    
    def __init__(self):
        self.base_url = settings.mediascout_api_url
        self.login = settings.mediascout_login
        self.password = settings.mediascout_password
        
    def _get_auth_header(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Basic Auth"""
        credentials = f"{self.login}:{self.password}"
        encoded = base64.b64encode(credentials.encode()).decode()
        return {
            "Authorization": f"Basic {encoded}",
            "Content-Type": "application/json"
        }
    
    async def ping(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å API"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.base_url}/ping") as response:
                    return response.status == 200
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–≤—è–∑–∏ —Å API: {e}")
            return False
    
    async def ping_auth(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ API"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.base_url}/pingauth",
                    headers=self._get_auth_header()
                ) as response:
                    return response.status == 200
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def get_kktu_codes(self) -> Optional[List[Dict[str, Any]]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ –ö–ö–¢–£ –∏–∑ API"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{self.base_url}/v3/dictionaries/kktu",
                    headers=self._get_auth_header()
                ) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ö–ö–¢–£: {response.status}")
                        return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–æ–≤ –ö–ö–¢–£: {e}")
            return None
    
    async def create_creative(
        self,
        form: str,
        kktu_code: str,
        media_base64: Optional[str] = None,
        media_filename: Optional[str] = None,
        text_data: Optional[str] = None,
        description: Optional[str] = None,
        advertiser_urls: Optional[List[str]] = None
    ) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤ —Å–∞–º–æ—Ä–µ–∫–ª–∞–º—ã
        
        Args:
            form: –§–æ—Ä–º–∞ –∫—Ä–µ–∞—Ç–∏–≤–∞ (Banner, Text, etc.)
            kktu_code: –ö–æ–¥ –ö–ö–¢–£
            media_base64: –ú–µ–¥–∏–∞-—Ñ–∞–π–ª –≤ base64 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            media_filename: –ò–º—è –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            text_data: –¢–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            description: –û–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è 30.15.1)
            advertiser_urls: –¶–µ–ª–µ–≤—ã–µ —Å—Å—ã–ª–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (erid, id, –∏ —Ç.–¥.) –∏–ª–∏ –æ—à–∏–±–∫–æ–π
        """
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        payload = {
            "form": form,
            "isSelfPromotion": True,
            "type": "Other",
            "isCobranding": False,
            "isNative": False,
            "isSocial": False,
            "isSocialQuota": False,
            "kktuCodes": [kktu_code]
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –∫–æ–¥–∞ –ö–ö–¢–£ 30.15.1
        if kktu_code == "30.15.1" and description:
            payload["description"] = description
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if advertiser_urls:
            payload["advertiserUrls"] = advertiser_urls
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if media_base64 and media_filename:
            payload["mediaData"] = [
                {
                    "fileName": media_filename,
                    "fileContentBase64": media_base64
                }
            ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if text_data:
            payload["textData"] = [
                {
                    "textData": text_data
                }
            ]
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å (–±–µ–∑ base64 –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
        payload_log = payload.copy()
        if "mediaData" in payload_log:
            payload_log["mediaData"] = [
                {**item, "fileContentBase64": f"<base64 data {len(item['fileContentBase64'])} chars>"} 
                for item in payload_log["mediaData"]
            ]
        
        logger.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–∞:")
        logger.info(f"   URL: {self.base_url}/v3/creatives")
        logger.info(f"   Payload: {payload_log}")
        logger.info(f"   Auth: {self.login}:***")
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/v3/creatives",
                    headers=self._get_auth_header(),
                    json=payload
                ) as response:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    response_text = await response.text()
                    
                    logger.info(f"üì• –û—Ç–≤–µ—Ç –æ—Ç API:")
                    logger.info(f"   Status: {response.status}")
                    logger.info(f"   Headers: {dict(response.headers)}")
                    logger.info(f"   Body: {response_text}")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
                    try:
                        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ JSON –∏–∑ text
                        import json
                        response_data = json.loads(response_text) if response_text else {}
                    except json.JSONDecodeError as json_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞: {json_error}")
                        logger.error(f"   Raw response: {response_text}")
                        return {
                            "success": False,
                            "error": f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ API: {response_text[:200]}"
                        }
                    except Exception as json_error:
                        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {json_error}")
                        logger.error(f"   Raw response: {response_text}")
                        return {
                            "success": False,
                            "error": f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ API: {str(json_error)}"
                        }
                    
                    if response.status == 201:
                        logger.info(f"‚úÖ –ö—Ä–µ–∞—Ç–∏–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {response_data.get('erid')}")
                        return {
                            "success": True,
                            "erid": response_data.get("erid"),
                            "id": response_data.get("id"),
                            "creative_group_id": response_data.get("creativeGroupId"),
                            "creative_group_name": response_data.get("creativeGroupName"),
                            "data": response_data
                        }
                    else:
                        error_detail = response_data.get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                        error_title = response_data.get("title", "")
                        errors = response_data.get("errors", {})
                        
                        error_msg = f"{error_title}: {error_detail}"
                        if errors:
                            error_msg += f"\n–î–µ—Ç–∞–ª–∏: {errors}"
                        
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–µ–∞—Ç–∏–≤–∞ (HTTP {response.status}): {error_msg}")
                        logger.error(f"   –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {response_data}")
                        
                        return {
                            "success": False,
                            "error": error_msg,
                            "status": response.status,
                            "full_response": response_data
                        }
                        
        except aiohttp.ClientError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {e}")
            logger.exception(e)
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"
            }
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—Ä–µ–∞—Ç–∏–≤–∞: {e}")
            logger.exception(e)
            return {
                "success": False,
                "error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            }


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
mediascout_api = MediascoutAPI()

