"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç–∞
"""
from aiogram import Bot
from aiogram.types import BotCommand, BotCommandScopeDefault, BotCommandScopeChat
from loguru import logger

from app.config import settings


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_COMMANDS = [
    BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
    BotCommand(command="menu", description="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
    BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å"),
    BotCommand(command="status", description="üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"),
    BotCommand(command="cancel", description="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
]

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
ADMIN_COMMANDS = [
    BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
    BotCommand(command="menu", description="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
    BotCommand(command="admin", description="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"),
    BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å"),
    BotCommand(command="status", description="üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"),
    BotCommand(command="cancel", description="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
]


async def setup_bot_commands(bot: Bot) -> None:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –æ–±–ª–∞—Å—Ç—è–º–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await bot.set_my_commands(
            commands=USER_COMMANDS,
            scope=BotCommandScopeDefault()
        )
        logger.info("‚úÖ User commands set successfully")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        for admin_id in settings.admin_user_ids:
            try:
                await bot.set_my_commands(
                    commands=ADMIN_COMMANDS,
                    scope=BotCommandScopeChat(chat_id=admin_id)
                )
                logger.info(f"‚úÖ Admin commands set for user {admin_id}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Failed to set admin commands for user {admin_id}: {e}")
        
        logger.info("‚úÖ All bot commands configured successfully")
        
    except Exception as e:
        logger.error(f"‚ùå Failed to setup bot commands: {e}")
        raise


async def update_admin_commands(bot: Bot, admin_id: int, is_admin: bool = True) -> None:
    """
    –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        admin_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_admin: True - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã, False - –æ–±—ã—á–Ω—ã–µ
    """
    try:
        commands = ADMIN_COMMANDS if is_admin else USER_COMMANDS
        await bot.set_my_commands(
            commands=commands,
            scope=BotCommandScopeChat(chat_id=admin_id)
        )
        logger.info(f"‚úÖ Commands updated for user {admin_id} (admin={is_admin})")
    except Exception as e:
        logger.error(f"‚ùå Failed to update commands for user {admin_id}: {e}")
        raise


async def remove_user_commands(bot: Bot, user_id: int) -> None:
    """
    –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (–≤–µ—Ä–Ω—É—Ç—å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º)
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        await bot.delete_my_commands(
            scope=BotCommandScopeChat(chat_id=user_id)
        )
        logger.info(f"‚úÖ User commands removed for user {user_id}")
    except Exception as e:
        logger.error(f"‚ùå Failed to remove commands for user {user_id}: {e}")
        raise

